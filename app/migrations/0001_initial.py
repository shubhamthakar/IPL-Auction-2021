# Generated by Django 3.1.5 on 2021-01-23 09:36

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('purse', models.FloatField(default=90.0)),
                ('rts', models.BooleanField(default=False)),
                ('rtm', models.BooleanField(default=False)),
                ('joker', models.BooleanField(default=False)),
                ('discount', models.BooleanField(default=False)),
                ('score', models.IntegerField(default=0, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('team', models.CharField(choices=[('RET', 'RET'), ('MI', 'MI'), ('CSK', 'CSK'), ('RCB', 'RCB'), ('KXIP', 'KXIP'), ('RR', 'RR'), ('DC', 'DC'), ('KKR', 'KKR'), ('SRH', 'SRH')], max_length=5)),
                ('type', models.CharField(choices=[('ALL', 'ALL'), ('BAT', 'BAT'), ('BOW', 'BOW')], max_length=5)),
                ('is_wk', models.BooleanField(default=False)),
                ('is_uncapped', models.BooleanField(default=False)),
                ('is_starred', models.BooleanField(default=False)),
                ('foreign', models.BooleanField(default=False)),
                ('overall', models.IntegerField()),
                ('bat_ppl', models.IntegerField()),
                ('bow_ppl', models.IntegerField()),
                ('bat_mid', models.IntegerField()),
                ('bow_mid', models.IntegerField()),
                ('bat_death', models.IntegerField()),
                ('bow_death', models.IntegerField()),
                ('color1', models.CharField(max_length=50)),
                ('color2', models.CharField(max_length=50)),
                ('image', models.URLField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_id', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_name', models.CharField(choices=[('MI', 'MI'), ('CSK', 'CSK'), ('RCB', 'RCB'), ('KXIP', 'KXIP'), ('RR', 'RR'), ('DC', 'DC'), ('KKR', 'KKR'), ('SRH', 'SRH')], max_length=5)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.room')),
                ('user', models.OneToOneField(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SoldPlayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField(default=0.0)),
                ('buying_team', models.CharField(choices=[('MI', 'MI'), ('CSK', 'CSK'), ('RCB', 'RCB'), ('KXIP', 'KXIP'), ('RR', 'RR'), ('DC', 'DC'), ('KKR', 'KKR'), ('SRH', 'SRH')], max_length=5)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.player')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.room')),
            ],
        ),
    ]
